# Context
Your task is to develop a complete pipeline for training a PyTorch model to solve the problem described below.

# Requirements
You must provide three distinct files: a primary Python submission script and two corresponding JSON configuration files.

* **`model.py`**: A single Python script containing all the necessary code. This script must include:
    * A `torch.utils.data.Dataset` class designed to preprocess the data into a format suitable for your model.
    * A `torch.nn.Module` class that defines your model's architecture. This class must have a `.from_config(cls, config)` class method to properly configure and instantiate it from a dictionary.
    * A `Trainer` class to encapsulate the training loop, optimization, evaluation logic, and management of the model's current weights. This class must have the following methods:
        * A `.from_config(cls, config, model)` class method for its configuration and instantiation.
        * A `.fit(self, num_epochs)` method that is a generator, which must yield at the end of each training epoch.
        * A `.predict(self, df)` method that takes input rows in the same format the `Dataset` consumes and returns predicted labels, reverse-transformed into their original format.

* **`model_config.json`**: A JSON file containing the configuration for your model's architecture (e.g., layer sizes, dropout rates, embedding dimensions).
* **`training_args.json`**: A JSON file containing the hyperparameters and settings for the trainer (e.g., learning rate, batch size, number of epochs configured externally and will not have effect if defined here).

When creating your submission, you must follow this exact file structure, without using markdown code blocks inside xml:

```xml
<files>
    <file path="model.py">
        ...
    </file>
    <file path="model_config.json">
        ...
    </file>
    <file path="training_args.json">
        ...
    </file>
</files>
````

# Problem

-----

{{ problem.description }}

-----

```
