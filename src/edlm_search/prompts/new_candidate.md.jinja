Your task is to develop a complete pipeline for training a PyTorch model to solve the problem described below.

# Requirements
You must provide three distinct files: a primary Python submission script and two corresponding JSON configuration files.

* **`main.py`**: A single Python script containing all the necessary code for the data handling, model definition, and training logic. This script must not contain any other code. It must include:
    * A `torch.utils.data.Dataset` class designed to preprocess the data into a format suitable for your model.
    * A `torch.nn.Module` class that defines your model's architecture. This class must have a `.from_config(cls, config)` class method to properly configure and instantiate it from a dictionary.
    * A `Trainer` class to encapsulate the training loop, optimization, and management of the model's current weights. This class must have the following methods:
        * A `.from_config(cls, num_epochs, config, model, dataset)` class method for its configuration and instantiation.
        * A `.predict(self, df)` method that takes input rows in the same format the `Dataset` consumes and returns predicted labels, reverse-transformed into their original format.
        * A `.train(self)` method that is a generator. This method must only perform the training loop. It must `yield` prediction labels on the validation dataset at the end of each training epoch.
    * A `main(train_df, valid_df, num_epochs)` function. This is the script's entry point.
        * For each epoch, the function should print a single Python list `[...]` to standard output, containing your predictions for the validation set.
    * No other section, like `if __name__ == `__main__`, is** required
* **`model_config.json`**: A JSON file containing the configuration for your model's architecture (e.g., layer sizes, dropout rates, embedding dimensions).
* **`training_args.json`**: A JSON file containing the hyperparameters and settings for the trainer (e.g., learning rate, batch size). The number of epochs is configured externally and will have no effect if defined here.

When creating your submission, you must follow this exact file structure:

```xml
<files>
    <file path="main.py">
        ...
    </file>
    <file path="model_config.json">
        ...
    </file>
    <file path="training_args.json">
        ...
    </file>
</files>
````

You're forbidden from:

  - Using markdown code blocks inside the XML
  - Using <![CDATA[ to wrap code

# Problem

-----

{{ problem.statement }}

-----
